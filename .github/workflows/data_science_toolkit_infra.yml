# This is a basic workflow to help you get started with Actions

name: create-dstoolkit-infrastructure

# Controls when the workflow will run
on:
  # Allows you to run this workflow from another workflow
  workflow_call:
    secrets:
      TENANT_ID:
        required: true
      SUBSCRIPTION_ID:
        required: true
      SERVICE_PRINCIPAL_CLIENT_ID:
        required: true
      DNS_ZONE_SUBSCRIPTION_ID:
        required: false
    inputs:
      environment:
        required: true
        type: string
      envFolderPath:
        required: true
        type: string

permissions:
  id-token: write
  contents: read

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
          
  create-data-science-toolkit-infra:

    # The type of runner that the job will run on
    runs-on: ubuntu-22.04

    environment: 
      name: ${{ inputs.environment }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Log into Azure
      - name: OIDC Login to Azure Public Cloud with AzPowershell (enableAzPSSession true)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.SERVICE_PRINCIPAL_CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: Get Main Variables
        run: |
          $json_data = Get-Content "./DeliveryIP_GitHub/variables/general_feature_flags/feature_flags_${{ inputs.envFolderPath }}.json" | ConvertFrom-Json -AsHashtable
          foreach ( $item in $json_data.GetEnumerator() )
          {
            if($($item.Value).GetType().Name.ToUpper().Contains("HASHTABLE") -or $($item.Value).GetType().Name.ToUpper().Contains("OBJECT[]")){
              $value = $($item.Value) | ConvertTo-Json -Compress
              "$($item.Name)=$value" >> $env:GITHUB_ENV
            } else {
              "$($item.Name)=$($item.Value)" >> $env:GITHUB_ENV
            }
          }
          $json_data = Get-Content "./DeliveryIP_GitHub/variables/general_variables/variables_${{ inputs.envFolderPath }}.json" | ConvertFrom-Json -AsHashtable
          foreach ( $item in $json_data.GetEnumerator() )
          {
            if($($item.Value).GetType().Name.ToUpper().Contains("HASHTABLE") -or $($item.Value).GetType().Name.ToUpper().Contains("OBJECT[]")){
              $value = $($item.Value) | ConvertTo-Json -Compress
              "$($item.Name)=$value" >> $env:GITHUB_ENV
            } else {
              "$($item.Name)=$($item.Value)" >> $env:GITHUB_ENV
            }
          }
          $json_data = Get-Content "./DeliveryIP_GitHub/variables/networking_setup/variables_${{ inputs.envFolderPath }}.json" | ConvertFrom-Json -AsHashtable
          foreach ( $item in $json_data.GetEnumerator() )
          {
            if($($item.Value).GetType().Name.ToUpper().Contains("HASHTABLE") -or $($item.Value).GetType().Name.ToUpper().Contains("OBJECT[]")){
              $value = $($item.Value) | ConvertTo-Json -Compress
              "$($item.Name)=$value" >> $env:GITHUB_ENV
            } else {
              "$($item.Name)=$($item.Value)" >> $env:GITHUB_ENV
            }
          }
          $json_data = Get-Content "./DeliveryIP_GitHub/variables/entra_assignments/variables_${{ inputs.envFolderPath }}.json" | ConvertFrom-Json -AsHashtable
          foreach ( $item in $json_data.GetEnumerator() )
          {
            if($($item.Value).GetType().Name.ToUpper().Contains("HASHTABLE") -or $($item.Value).GetType().Name.ToUpper().Contains("OBJECT[]")){
              $value = $($item.Value) | ConvertTo-Json -Compress
              "$($item.Name)=$value" >> $env:GITHUB_ENV
            } else {
              "$($item.Name)=$($item.Value)" >> $env:GITHUB_ENV
            }
          }
          $json_data = Get-Content "./DeliveryIP_GitHub/variables/data_science_toolkit/data_science_toolkit_${{ inputs.envFolderPath }}.json" | ConvertFrom-Json -AsHashtable
          foreach ( $item in $json_data.GetEnumerator() )
          {
            if($($item.Value).GetType().Name.ToUpper().Contains("HASHTABLE") -or $($item.Value).GetType().Name.ToUpper().Contains("OBJECT[]")){
              $value = $($item.Value) | ConvertTo-Json -Compress
              "$($item.Name)=$value" >> $env:GITHUB_ENV
            } else {
              "$($item.Name)=$($item.Value)" >> $env:GITHUB_ENV
            }
          }
        shell: pwsh

      # Create resource group for environment resources and get service principal name
      - name: Set Env Variables Needed For Downstream Actions
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $spDetails = az ad sp show --id "${{ secrets.SERVICE_PRINCIPAL_CLIENT_ID }}" | ConvertFrom-Json  

            # Service Principal Name
            $servicePrincipalName = $spDetails.appDisplayName
            Write-Output "::add-mask::$servicePrincipalName"
            "servicePrincipalName=$servicePrincipalName" >> $env:GITHUB_ENV

            # Service Principal AAD Identity ID
            $servicePrincipalObjectId = $spDetails.id
            Write-Output "::add-mask::$servicePrincipalObjectId"
            "servicePrincipalObjectId=$servicePrincipalObjectId" >> $env:GITHUB_ENV

            # Tags with Single Quotes For Bicep Templates
            $tags_single_quote = '${{ env.tags }}' -replace '"', "'"
            "tags_single_quote=$tags_single_quote" >> $env:GITHUB_ENV

            if ( '${{ env.Entra_Groups_Data_Publishers }}'.SubString(0,1) -ne "[" ) { 
              $Entra_Groups_Data_Publishers = '['+ '${{ env.Entra_Groups_Data_Publishers }}' + ']'
              "Entra_Groups_Data_Publishers=$Entra_Groups_Data_Publishers" >> $env:GITHUB_ENV
            }

            if ( '${{ env.Entra_Groups_Data_Producers }}'.SubString(0,1) -ne "[" ) { 
              $Entra_Groups_Data_Producers = '['+ '${{ env.Entra_Groups_Data_Producers }}' + ']'
              "Entra_Groups_Data_Producers=$Entra_Groups_Data_Producers" >> $env:GITHUB_ENV
            }

            if ( '${{ env.Entra_Groups_Data_Consumers }}'.SubString(0,1) -ne "[" ) { 
              $Entra_Groups_Data_Consumers = '['+ '${{ env.Entra_Groups_Data_Consumers }}' + ']'
              "Entra_Groups_Data_Consumers=$Entra_Groups_Data_Consumers" >> $env:GITHUB_ENV
            }

            $Entra_Group_Admin_HashTable = '${{ env.Entra_Group_Admin }}' | ConvertFrom-Json
            $Entra_Group_Admin_ID = $Entra_Group_Admin_HashTable.Group_ID
            "Entra_Group_Admin_ID=$Entra_Group_Admin_ID" >> $env:GITHUB_ENV
            $Entra_Group_Admin_Name = $Entra_Group_Admin_HashTable.Group_Name
            "Entra_Group_Admin_Name=$Entra_Group_Admin_Name" >> $env:GITHUB_ENV

            $Entra_Group_Shared_Service_HashTable = '${{ env.Entra_Group_Shared_Service }}' | ConvertFrom-Json
            $Entra_Group_Shared_Service_ID = $Entra_Group_Shared_Service_HashTable.Group_ID
            "Entra_Group_Shared_Service_ID=$Entra_Group_Shared_Service_ID" >> $env:GITHUB_ENV
            $Entra_Group_Shared_Service_Name = $Entra_Group_Shared_Service_HashTable.Group_Name
            "Entra_Group_Shared_Service_Name=$Entra_Group_Shared_Service_Name" >> $env:GITHUB_ENV

            $Entra_Group_Governance_HashTable = '${{ env.Entra_Group_Governance }}' | ConvertFrom-Json
            $Entra_Group_Governance_ID = $Entra_Group_Governance_HashTable.Group_ID
            "Entra_Group_Governance_ID=$Entra_Group_Governance_ID" >> $env:GITHUB_ENV
            $Entra_Group_Governance_Name = $Entra_Group_Governance_HashTable.Group_Name
            "Entra_Group_Governance_Name=$Entra_Group_Governance_Name" >> $env:GITHUB_ENV
          azPSVersion: "latest"

      # Create resource group for environment resources and get service principal name
      - name: Create Data Science Toolkit Resource Group
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $tagsHashTable = '${{ env.tags }}' | ConvertFrom-Json -AsHashtable
            New-AzResourceGroup -Name ${{ env.DataScienceToolkitRgName }} -Location ${{ env.azureResourceLocation }} -Tag $tagsHashTable -Force
          azPSVersion: "latest"

      - name: Deploy Key Vault
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.DataScienceToolkitRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/keyvault.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/dstoolkit_keyvault.json
            keyVaultName=${{ env.keyVaultName }} 
            DeployLogAnalytics=${{ env.DeployLogAnalytics }}
            logAnalyticsRG=${{ env.PrimaryRgName }}
            logAnalyticsName=${{ env.logAnalyticsName }} 
            DeployWithCustomNetworking=${{ env.DeployWithCustomNetworking }} 
            CreatePrivateEndpoints=${{ env.CreatePrivateEndpoints }} 
            CreatePrivateEndpointsInSameRgAsResource=${{ env.CreatePrivateEndpointsInSameRgAsResource }} 
            UseManualPrivateLinkServiceConnections=${{ env.UseManualPrivateLinkServiceConnections }} 
            VnetforPrivateEndpointsRgName=${{ env.VnetforPrivateEndpointsRgName }} 
            VnetforPrivateEndpointsName=${{ env.VnetforPrivateEndpointsName }} 
            PrivateEndpointSubnetName=${{ env.PrivateEndpointSubnetName }} 
            DNS_ZONE_SUBSCRIPTION_ID=${{ secrets.DNS_ZONE_SUBSCRIPTION_ID }}
            PrivateDNSZoneRgName=${{ env.PrivateDNSZoneRgName }} 
            PrivateEndpointId=${{ env.PrivateEndpointId }} 
            DeployResourcesWithPublicAccess=${{ env.DeployResourcesWithPublicAccess }}
            AllowAccessToIpRange=${{ env.AllowAccessToIpRange }}
            IpRangeCidr=${{ env.IpRangeCidr }}
          failOnStdErr: false

      - name: Deploy Communication Services
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.DataScienceToolkitRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/communication_services.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/dstoolkit_communication_services.json
            communicationServicesName=${{ env.communicationServicesName }} 
            emailCommunicationServicesName=${{ env.emailCommunicationServicesName }} 
            webTitle="${{ env.webTitle }}"
            keyVaultName=${{ env.keyVaultName }}
          failOnStdErr: false

      - name: Deploy Cosmos DB
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.DataScienceToolkitRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/cosmos_db.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/dstoolkit_cosmos_db.json
            cosmosDbName=${{ env.cosmosDbName }} 
          failOnStdErr: false

      - name: Deploy Cognitive Search
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.DataScienceToolkitRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/cognitive_search.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/dstoolkit_cognitive_search.json
            cognitiveSearchName=${{ env.cognitiveSearchName }} 
            DeployWithCustomNetworking=${{ env.DeployWithCustomNetworking }} 
            DeployResourcesWithPublicAccess=${{ env.DeployResourcesWithPublicAccess }}
            AllowAccessToIpRange=${{ env.AllowAccessToIpRange }}
            IpRangeCidr=${{ env.IpRangeCidr }}
          failOnStdErr: false

      - name: Deploy Service Bus Namespace
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.DataScienceToolkitRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/service_bus_namespace.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/dstoolkit_service_bus_namespace.json
            serviceBusNamespaceName=${{ env.serviceBusNamespaceName }} 
            DeployResourcesWithPublicAccess=${{ env.DeployResourcesWithPublicAccess }}
          failOnStdErr: false

      - name: Deploy Static Web App
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.DataScienceToolkitRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/static_web_app.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/dstoolkit_static_web_app.json
            staticWebAppName=${{ env.staticWebAppName }} 
          failOnStdErr: false

      - name: Deploy App Service Plan
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.DataScienceToolkitRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/app_service_plan_linux.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/dstoolkit_app_service_plan.json
            appServicePlanName=${{ env.appServicePlanName }} 
          failOnStdErr: false

      - name: Deploy Function App Storage Account
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.DataScienceToolkitRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/storageaccount.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/dstoolkit_storage_function.json
            storageAccountName=${{ env.functionAppStorageName }} 
            DeployWithCustomNetworking=${{ env.DeployWithCustomNetworking }} 
            CreatePrivateEndpoints=${{ env.CreatePrivateEndpoints }} 
            CreatePrivateEndpointsInSameRgAsResource=${{ env.CreatePrivateEndpointsInSameRgAsResource }} 
            UseManualPrivateLinkServiceConnections=${{ env.UseManualPrivateLinkServiceConnections }} 
            VnetforPrivateEndpointsRgName=${{ env.VnetforPrivateEndpointsRgName }} 
            VnetforPrivateEndpointsName=${{ env.VnetforPrivateEndpointsName }} 
            PrivateEndpointSubnetName=${{ env.PrivateEndpointSubnetName }} 
            DNS_ZONE_SUBSCRIPTION_ID=${{ secrets.DNS_ZONE_SUBSCRIPTION_ID }}
            PrivateDNSZoneRgName=${{ env.PrivateDNSZoneRgName }} 
            PrivateEndpointId=${{ env.PrivateEndpointId }} 
            DeployResourcesWithPublicAccess=${{ env.DeployResourcesWithPublicAccess }}
            AllowAccessToIpRange=${{ env.AllowAccessToIpRange }}
            IpRangeCidr=${{ env.IpRangeCidr }}
            DeployLogAnalytics=${{ env.DeployLogAnalytics }}
            logAnalyticsRG=${{ env.PrimaryRgName }}
            logAnalyticsName=${{ env.logAnalyticsName }} 
          failOnStdErr: false

      - name: Deploy App Insights for Function App
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.DataScienceToolkitRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/appinsights.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/dstoolkit_appinsights_function.json
            appInsightsName=${{ env.functionAppInsightsName }} 
            DeployLogAnalytics=${{ env.DeployLogAnalytics }}
            logAnalyticsName=${{ env.logAnalyticsName }} 
            logAnalyticsRG=${{ env.PrimaryRgName }}
            DeployResourcesWithPublicAccess=${{ env.DeployResourcesWithPublicAccess }}
          failOnStdErr: false

      - name: Deploy Function App
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.DataScienceToolkitRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/dstoolkit_function.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/dstoolkit_function.json
            functionAppName=${{ env.functionAppName }} 
            functionAppServicePlanName=${{ env.appServicePlanName }} 
            functionAppInsightsName=${{ env.functionAppInsightsName }} 
            functionAppStorageName=${{ env.functionAppStorageName }} 
            DeployWithCustomNetworking=${{ env.DeployWithCustomNetworking }} 
            CreatePrivateEndpoints=${{ env.CreatePrivateEndpoints }} 
            CreatePrivateEndpointsInSameRgAsResource=${{ env.CreatePrivateEndpointsInSameRgAsResource }} 
            UseManualPrivateLinkServiceConnections=${{ env.UseManualPrivateLinkServiceConnections }} 
            VnetforPrivateEndpointsRgName=${{ env.VnetforPrivateEndpointsRgName }} 
            VnetforPrivateEndpointsName=${{ env.VnetforPrivateEndpointsName }} 
            PrivateEndpointSubnetName=${{ env.PrivateEndpointSubnetName }} 
            DNS_ZONE_SUBSCRIPTION_ID=${{ secrets.DNS_ZONE_SUBSCRIPTION_ID }}
            PrivateDNSZoneRgName=${{ env.PrivateDNSZoneRgName }} 
            PrivateEndpointId=${{ env.PrivateEndpointId }} 
            VnetForResourcesRgName=${{ env.VnetForResourcesRgName }}
            VnetForResourcesName=${{ env.VnetForResourcesName }}
            DeployFunctionAppInVnet=${{ env.DeployFunctionAppInVnet }}
            FunctionAppSubnetName=${{ env.AppServiceSubnetName }}
            DeployResourcesWithPublicAccess=${{ env.DeployResourcesWithPublicAccess }}
            cosmosDbName=${{ env.cosmosDbName }}
            keyVaultName=${{ env.keyVaultName }}
            staticWebAppName=${{ env.staticWebAppName }}
            serviceBusNamespaceName=${{ env.serviceBusNamespaceName }}
            emailCommunicationServicesName=${{ env.emailCommunicationServicesName }}
          failOnStdErr: false

      - name: Deploy Web App Storage Account
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.DataScienceToolkitRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/storageaccount.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/dstoolkit_storage_webapp.json
            storageAccountName=${{ env.webAppStorageName }} 
            DeployWithCustomNetworking=${{ env.DeployWithCustomNetworking }} 
            CreatePrivateEndpoints=${{ env.CreatePrivateEndpoints }} 
            CreatePrivateEndpointsInSameRgAsResource=${{ env.CreatePrivateEndpointsInSameRgAsResource }} 
            UseManualPrivateLinkServiceConnections=${{ env.UseManualPrivateLinkServiceConnections }} 
            VnetforPrivateEndpointsRgName=${{ env.VnetforPrivateEndpointsRgName }} 
            VnetforPrivateEndpointsName=${{ env.VnetforPrivateEndpointsName }} 
            PrivateEndpointSubnetName=${{ env.PrivateEndpointSubnetName }} 
            DNS_ZONE_SUBSCRIPTION_ID=${{ secrets.DNS_ZONE_SUBSCRIPTION_ID }}
            PrivateDNSZoneRgName=${{ env.PrivateDNSZoneRgName }} 
            PrivateEndpointId=${{ env.PrivateEndpointId }} 
            DeployResourcesWithPublicAccess=${{ env.DeployResourcesWithPublicAccess }}
            AllowAccessToIpRange=${{ env.AllowAccessToIpRange }}
            IpRangeCidr=${{ env.IpRangeCidr }}
            DeployLogAnalytics=${{ env.DeployLogAnalytics }}
            logAnalyticsRG=${{ env.PrimaryRgName }}
            logAnalyticsName=${{ env.logAnalyticsName }} 
          failOnStdErr: false

      # Enable Blob Public Access on Web App Storage Account Container
      - name: Enable Blob Public Access on Web App Storage Account Container
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $storageAccount = Get-AzStorageAccount -ResourceGroupName "${{ env.DataScienceToolkitRgName }}" -Name "${{ env.webAppStorageName }}"
            $ctx = $storageAccount.Context
            Set-AzStorageContainerAcl -Context $ctx -Container "images" -Permission Blob
          azPSVersion: "latest"

      - name: Deploy App Insights for Web App
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.DataScienceToolkitRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/appinsights.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/dstoolkit_appinsights_webapp.json
            appInsightsName=${{ env.webAppInsightsName }} 
            DeployLogAnalytics=${{ env.DeployLogAnalytics }}
            logAnalyticsName=${{ env.logAnalyticsName }} 
            logAnalyticsRG=${{ env.PrimaryRgName }}
            DeployResourcesWithPublicAccess=${{ env.DeployResourcesWithPublicAccess }}
          failOnStdErr: false

      - name: Deploy Web App
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.DataScienceToolkitRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/dstoolkit_webapp.bicep
          # Supply deployment parameter values.
          parameters: ./DeliveryIP_GitHub/bicep_parameters/${{ inputs.envFolderPath }}/dstoolkit_web_app.json
            webAppName=${{ env.webAppName }} 
            webAppServicePlanName=${{ env.appServicePlanName }} 
            webAppInsightsName=${{ env.webAppInsightsName }} 
            webAppStorageName=${{ env.webAppStorageName }} 
            DeployWithCustomNetworking=${{ env.DeployWithCustomNetworking }} 
            CreatePrivateEndpoints=${{ env.CreatePrivateEndpoints }} 
            CreatePrivateEndpointsInSameRgAsResource=${{ env.CreatePrivateEndpointsInSameRgAsResource }} 
            UseManualPrivateLinkServiceConnections=${{ env.UseManualPrivateLinkServiceConnections }} 
            VnetforPrivateEndpointsRgName=${{ env.VnetforPrivateEndpointsRgName }} 
            VnetforPrivateEndpointsName=${{ env.VnetforPrivateEndpointsName }} 
            PrivateEndpointSubnetName=${{ env.PrivateEndpointSubnetName }} 
            DNS_ZONE_SUBSCRIPTION_ID=${{ secrets.DNS_ZONE_SUBSCRIPTION_ID }}
            PrivateDNSZoneRgName=${{ env.PrivateDNSZoneRgName }} 
            PrivateEndpointId=${{ env.PrivateEndpointId }} 
            VnetForResourcesRgName=${{ env.VnetForResourcesRgName }}
            VnetForResourcesName=${{ env.VnetForResourcesName }}
            DeployWebAppInVnet=${{ env.DeployWebAppInVnet }}
            WebAppSubnetName=${{ env.AppServiceSubnetName }}
            DeployResourcesWithPublicAccess=${{ env.DeployResourcesWithPublicAccess }}
            cosmosDbName=${{ env.cosmosDbName }}
            keyVaultName=${{ env.keyVaultName }}
            staticWebAppName=${{ env.staticWebAppName }}
            serviceBusNamespaceName=${{ env.serviceBusNamespaceName }}
            emailCommunicationServicesName=${{ env.emailCommunicationServicesName }}
            cognitiveSearchName=${{ env.cognitiveSearchName }}
          failOnStdErr: false

      - name: Deploy RBAC for Data Science Toolkit
        uses: Azure/arm-deploy@v1
        with:
          # Provide the scope of the deployment. Valid values are: 'resourcegroup', 'managementgroup', 'subscription'
          scope: 'resourcegroup'
          # Provide the name of a resource group, only required for resource Group deployments.
          resourceGroupName: ${{ env.DataScienceToolkitRgName }}
          # Specify the path or URL to the Azure Resource Manager template.
          template: ./DeliveryIP_GitHub/bicep_templates/dstoolkit_rbac.bicep
          # Supply deployment parameter values.
          parameters: 
            functionAppName=${{ env.functionAppName }} 
            webAppName=${{ env.webAppName }} 
            webAppStorageName=${{ env.webAppStorageName }} 
            cosmosDbName=${{ env.cosmosDbName }}
            cosmosDbSqlDatabaseName=${{ env.cosmosDbSqlDatabaseName }}
            keyVaultName=${{ env.keyVaultName }}
            serviceBusNamespaceName=${{ env.serviceBusNamespaceName }}
            cognitiveSearchName=${{ env.cognitiveSearchName }}
            servicePrincipalId=${{ env.servicePrincipalObjectId }}
          failOnStdErr: false

      # Deploy Cognitive Search Index On Cosmos DB
      - name: Deploy Cognitive Search Index On Cosmos DB
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $keyPairs = az search admin-key show --resource-group "${{ env.DataScienceToolkitRgName }}" --service-name "${{ env.cognitiveSearchName }}" | ConvertFrom-Json
            $primaryKey = $keyPairs.primaryKey

            $headers = @{
              'api-key' = "$primaryKey"
              'Content-Type' = 'application/json' 
              'Accept' = 'application/json' 
            }

            $datasource_body = '
            {
                "name": "${{ env.cosmosDbName }}",
                "type": "cosmosdb",
                "credentials": {
                  "connectionString": "ResourceId=/subscriptions/${{ secrets.SUBSCRIPTION_ID }}/resourceGroups/${{ env.DataScienceToolkitRgName }}/providers/Microsoft.DocumentDB/databaseAccounts/${{ env.cosmosDbName }};Database=DataStrategyDb;"
                },
                "container": {
                  "name": "Assets"
                },
                "dataChangeDetectionPolicy": {
                  "@odata.type": "#Microsoft.Azure.Search.HighWaterMarkChangeDetectionPolicy",
                  "highWaterMarkColumnName": "_ts"
                }
            }'

            $api_datasource_url = 'https://${{ env.cognitiveSearchName }}.search.windows.net/datasources/${{ env.cosmosDbName }}?api-version=2020-06-30'

            Invoke-RestMethod -Method 'PUT' -Uri $api_datasource_url -Headers $headers -Body $datasource_body

            # create index
            $index_body = Get-Content "./DeliveryIP_GitHub/dstoolkit/cognitive_search_indexes/cosmosdb-index.json" | Out-String

            $api_index_url = 'https://${{ env.cognitiveSearchName }}.search.windows.net/indexes/cosmosdb-index?api-version=2020-06-30'

            Invoke-RestMethod -Method 'PUT' -Uri $api_index_url -Headers $headers -Body $index_body

            # create indexer
            $indexer_body = '
            {
              "name": "cosmosdb-indexer",
              "dataSourceName": "${{ env.cosmosDbName }}",
              "targetIndexName": "cosmosdb-index",
              "schedule": {
                "interval": "PT10M",
                "startTime": "2023-02-08T13:48:06.857Z"
              }
            }
            '
            $api_indexer_url = 'https://${{ env.cognitiveSearchName }}.search.windows.net/indexers/cosmosdb-indexer?api-version=2020-06-30'

            Invoke-RestMethod -Method 'PUT' -Uri $api_indexer_url -Headers $headers -Body $indexer_body
          azPSVersion: "latest"