{
    "name": "df_invoiceload_invoice_fromStaging",
    "properties": {
        "description": "This will map the invoice data to the invoice table in the Lake DB. This is done to bring the invoice amount, the tax amount,the invoice date, the sold to state and the sold to sector into the table per TAX ID",
        "folder": {
            "name": "df_LakeDBLoad/OperationalMapped"
        },
        "type": "MappingDataFlow",
        "typeProperties": {
            "sources": [
                {
                    "linkedService": {
                        "referenceName": "LS_DataLake",
                        "type": "LinkedServiceReference"
                    },
                    "name": "FactInvoice"
                },
                {
                    "name": "Taxpayer"
                }
            ],
            "sinks": [
                {
                    "name": "Invoice"
                }
            ],
            "transformations": [
                {
                    "name": "derivedColumn1"
                },
                {
                    "name": "derivedColumn3"
                },
                {
                    "name": "surrogateKey1"
                },
                {
                    "name": "select1"
                },
                {
                    "name": "join1"
                }
            ],
            "scriptLines": [
                "source(output(",
                "          InvoiceId as string,",
                "          OriginalInvoiceID as string,",
                "          CustomerAccountId as string,",
                "          TaxPayerId as string,",
                "          originalTaxPayerID as string,",
                "          InvoiceDate as string,",
                "          InvoiceToName as string,",
                "          InvoiceToPartyId as string,",
                "          InvoiceSoldToState as string,",
                "          InvoiceSoldToSector as string,",
                "          InvoiceToLocationId as string,",
                "          InvoiceToTelephoneNumber as string,",
                "          InvoiceToFaxNumber as string,",
                "          InvoiceToEmailAddress as string,",
                "          InvoiceNote as string,",
                "          TotalInvoiceProductAmount as string,",
                "          TotalInvoiceChargesAmount as string,",
                "          TotalInvoiceAdjustmentsAmount as string,",
                "          TotalInvoiceTaxesAmount as string,",
                "          TotalInvoiceAmount as string,",
                "          OrderId as string,",
                "          InvoiceModeId as string,",
                "          IsoCurrencyCode as string,",
                "          InvoiceStatusId as string,",
                "          IsoLanguageId as string,",
                "          InvoiceSeriesNumber as string,",
                "          InvoiceLatestEvent as string,",
                "          InvoiceLatestEventDate as string,",
                "          InvoiceDestination as string,",
                "          InvoiceFinalConsumer as string,",
                "          InvoiceStateTaxpayer as string,",
                "          InvoiceBuyerPresent as string,",
                "          InvoiceNumber as string,",
                "          Year as string",
                "     ),",
                "     allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     ignoreNoFilesFound: false,",
                "     format: 'parquet',",
                "     fileSystem: 'staging',",
                "     wildcardPaths:['EnterpriseTaxModel/Invoice/*']) ~> FactInvoice",
                "source(output(",
                "          TaxpayerId as long,",
                "          OriginalTaxpayerID as string,",
                "          TaxpayerEstablishedDate as date,",
                "          TaxpayerTypeId as integer,",
                "          ResponsibilityCenterId as integer,",
                "          LedgerId as integer,",
                "          LedgerAccountNumber as string,",
                "          Note as string,",
                "          PartyId as long,",
                "          GlobalLocationNumber as decimal(13,0),",
                "          LegalEntityName as string,",
                "          LegalEntityStateRegistration as string,",
                "          StateOfLegalEntityResidence as string,",
                "          LegalEntityMunicipality1 as string",
                "     ),",
                "     allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     store: 'synapse',",
                "     databaseType: 'spark',",
                "     format: 'table',",
                "     database: 'EnterpriseTaxModel',",
                "     tableName: 'Taxpayer') ~> Taxpayer",
                "join1 derive(TotalInvoiceTaxesAmount = toDecimal(TotalInvoiceTaxesAmount),",
                "          TotalInvoiceAmount = toDecimal(TotalInvoiceAmount),",
                "          InvoiceDate = toDate(InvoiceDate),",
                "          Year = year(toDate(Year))) ~> derivedColumn1",
                "derivedColumn1 derive(Year = iifNull(Year, 9999)) ~> derivedColumn3",
                "derivedColumn3 keyGenerate(output(InvoiceIdNew as long),",
                "     startAt: 1L,",
                "     stepValue: 1L) ~> surrogateKey1",
                "surrogateKey1 select(mapColumn(",
                "          InvoiceId = InvoiceIdNew,",
                "          OriginalInvoiceID,",
                "          CustomerAccountId,",
                "          TaxPayerId = Taxpayer@TaxpayerId,",
                "          originalTaxPayerID = FactInvoice@originalTaxPayerID,",
                "          InvoiceDate,",
                "          InvoiceToName,",
                "          InvoiceToPartyId,",
                "          InvoiceSoldToState,",
                "          InvoiceSoldToSector,",
                "          InvoiceToLocationId,",
                "          InvoiceToTelephoneNumber,",
                "          InvoiceToFaxNumber,",
                "          InvoiceToEmailAddress,",
                "          InvoiceNote,",
                "          TotalInvoiceProductAmount,",
                "          TotalInvoiceChargesAmount,",
                "          TotalInvoiceAdjustmentsAmount,",
                "          TotalInvoiceTaxesAmount,",
                "          TotalInvoiceAmount,",
                "          OrderId,",
                "          InvoiceModeId,",
                "          IsoCurrencyCode,",
                "          InvoiceStatusId,",
                "          IsoLanguageId,",
                "          InvoiceSeriesNumber,",
                "          InvoiceLatestEvent,",
                "          InvoiceLatestEventDate,",
                "          InvoiceDestination,",
                "          InvoiceFinalConsumer,",
                "          InvoiceStateTaxpayer,",
                "          InvoiceBuyerPresent,",
                "          InvoiceNumber,",
                "          Year",
                "     ),",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true) ~> select1",
                "FactInvoice, Taxpayer join(FactInvoice@originalTaxPayerID == Taxpayer@OriginalTaxpayerID,",
                "     joinType:'left',",
                "     matchType:'exact',",
                "     ignoreSpaces: false,",
                "     broadcast: 'auto')~> join1",
                "select1 sink(allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     store: 'synapse',",
                "     databaseType: 'spark',",
                "     format: 'table',",
                "     database: 'EnterpriseTaxModel',",
                "     tableName: 'Invoice',",
                "     input(",
                "          InvoiceId as integer,",
                "          CustomerAccountId as long,",
                "          TaxPayerId as string,",
                "          InvoiceDate as date,",
                "          InvoiceToName as string,",
                "          InvoiceToPartyId as long,",
                "          InvoiceSoldToState as string,",
                "          InvoiceSoldToSector as string,",
                "          InvoiceToLocationId as integer,",
                "          InvoiceToTelephoneNumber as decimal(15,0),",
                "          InvoiceToFaxNumber as decimal(15,0),",
                "          InvoiceToEmailAddress as string,",
                "          InvoiceNote as string,",
                "          TotalInvoiceProductAmount as decimal(18,2),",
                "          TotalInvoiceChargesAmount as decimal(18,2),",
                "          TotalInvoiceAdjustmentsAmount as decimal(18,2),",
                "          TotalInvoiceTaxesAmount as decimal(18,2),",
                "          TotalInvoiceAmount as decimal(18,2),",
                "          OrderId as long,",
                "          InvoiceModeId as integer,",
                "          IsoCurrencyCode as string,",
                "          InvoiceStatusId as integer,",
                "          IsoLanguageId as integer,",
                "          Year as integer",
                "     )) ~> Invoice"
            ]
        }
    }
}