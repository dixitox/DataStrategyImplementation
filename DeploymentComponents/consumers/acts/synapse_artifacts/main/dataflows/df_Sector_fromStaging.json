{
	"name": "df_Sector_fromStaging",
	"properties": {
		"folder": {
			"name": "df_LakeDBLoad/OperationalMapped"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "LS_DataLake",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				},
				{
					"name": "taxpayer"
				}
			],
			"sinks": [
				{
					"name": "Sector"
				}
			],
			"transformations": [
				{
					"name": "surrogateKey1"
				},
				{
					"name": "join1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          SectorId as string,",
				"          TaxpayerId as string,",
				"          SectorName as string,",
				"          OriginalSectorID as string,",
				"          OriginalTaxpayerID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     fileSystem: 'staging',",
				"     wildcardPaths:['EnterpriseTaxModel/Sector/*']) ~> source1",
				"source(output(",
				"          TaxpayerId as long,",
				"          OriginalTaxpayerID as string,",
				"          TaxpayerEstablishedDate as date,",
				"          TaxpayerTypeId as integer,",
				"          ResponsibilityCenterId as integer,",
				"          LedgerId as integer,",
				"          LedgerAccountNumber as string,",
				"          Note as string,",
				"          PartyId as long,",
				"          GlobalLocationNumber as decimal(13,0),",
				"          LegalEntityName as string,",
				"          LegalEntityStateRegistration as string,",
				"          StateOfLegalEntityResidence as string,",
				"          LegalEntityMunicipality as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'EnterpriseTaxModel',",
				"     tableName: 'Taxpayer') ~> taxpayer",
				"source1 keyGenerate(output(SectorId as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1, taxpayer join(source1@OriginalTaxpayerID == taxpayer@OriginalTaxpayerID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          SectorId,",
				"          TaxpayerId = taxpayer@TaxpayerId,",
				"          SectorName,",
				"          OriginalSectorID,",
				"          OriginalTaxpayerID = source1@OriginalTaxpayerID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'EnterpriseTaxModel',",
				"     tableName: 'Sector') ~> Sector"
			]
		}
	}
}